# Firebase Document Purger (FBPURGE)

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
![Version](https://img.shields.io/badge/version-1.0.0-blue.svg)

## 📝 Description

**Firebase Document Purger (FBPURGE)** est une application web moderne permettant de supprimer en masse des documents Firestore selon un critère précis, via une interface graphique simple et sécurisée. Elle est conçue pour le développement local et le nettoyage rapide de collections de test.

Deux modes sont proposés :
- **Client SDK** : suppression directe depuis le navigateur (règles Firestore permissives requises)
- **Admin SDK (Cloud Function)** : suppression via une Cloud Function callable (plus sécurisé, recommandé)

## ⚠️ Avertissement Sécurité

> **Cet outil est UNIQUEMENT destiné au développement local ou à des environnements de test.**
> - **Ne jamais utiliser en production** ou sur des données sensibles.
> - Les suppressions sont **irréversibles**.
> - En mode Client SDK, vos règles Firestore doivent être strictes en production.
> - En mode Admin SDK, sécurisez l'accès à votre Cloud Function.

## 🎨 Interface Utilisateur

L'interface web (voir `index.html` et `style.css`) propose :
- Un choix du mode :
  - **Client SDK (Direct Browser)**
  - **Admin SDK (via Cloud Function)**
- Un champ pour coller la configuration Firebase (Client SDK)
- Un champ pour le nom de la Cloud Function (mode Admin uniquement)
- Les champs de critère :
  - **Nom de la collection** (ex : `utilisateurs_tests`)
  - **Champ de critère** (ex : `statut`)
  - **Valeur du champ** (ex : `inactif`, `123`, `true`)
  - **Type de la valeur** (String, Number, Boolean)
- Un bouton **Démarrer la Purge**
- Une boîte de message pour le retour utilisateur (succès, erreur, info)
- Un avertissement de sécurité très visible

L'UI est responsive, moderne et accessible.

## 🚀 Installation & Lancement

1. Clonez ou téléchargez ce dépôt.
2. Ouvrez `index.html` dans un navigateur moderne (support ES6 et modules).
3. Aucun serveur n'est requis pour l'usage local.

## ⚙️ Configuration

### 1. Récupérer la configuration Firebase
- Depuis la [console Firebase](https://console.firebase.google.com/), allez dans les paramètres du projet > "Vos applications" > Web > copiez l'objet `firebaseConfig`.
- Collez-le dans le champ prévu de l'interface (exemple) :

```js
const firebaseConfig = {
  apiKey: "...",
  authDomain: "...",
  projectId: "...",
  storageBucket: "...",
  messagingSenderId: "...",
  appId: "..."
};
```

### 2. (Optionnel) Déployer la Cloud Function (mode Admin SDK)
- Initialisez les fonctions :

```bash
firebase init functions
```

- Ajoutez dans `functions/index.js` :

```js
const functions = require('firebase-functions');
const admin = require('firebase-admin');
if (!admin.apps.length) admin.initializeApp();
exports.deleteDocumentsByQuery = functions.https.onCall(async (data, context) => {
  const { collectionName, fieldName, fieldValue, fieldValueType } = data;
  if (!collectionName || !fieldName || fieldValue === undefined) {
    throw new functions.https.HttpsError('invalid-argument', 'Paramètres invalides');
  }
  const db = admin.firestore();
  let parsedFieldValue = fieldValue;
  switch (fieldValueType) {
    case 'number': parsedFieldValue = parseFloat(fieldValue); break;
    case 'boolean': parsedFieldValue = String(fieldValue).toLowerCase() === 'true'; break;
    default: parsedFieldValue = String(fieldValue);
  }
  try {
    const snapshot = await db.collection(collectionName).where(fieldName, '==', parsedFieldValue).get();
    if (snapshot.empty) return { status: 'success', deletedCount: 0 };
    const batch = db.batch();
    snapshot.docs.forEach(doc => batch.delete(doc.ref));
    await batch.commit();
    return { status: 'success', deletedCount: snapshot.size };
  } catch (error) {
    throw new functions.https.HttpsError('internal', error.message);
  }
});
```

- Déployez :

```bash
firebase deploy --only functions
```

- Notez le nom de la fonction (ex : `deleteDocumentsByQuery`) et renseignez-le dans l'UI.

## 🖱️ Utilisation

1. Ouvrez `index.html` dans votre navigateur.
2. Choisissez le mode (Client SDK ou Admin SDK).
3. Collez votre configuration Firebase.
4. (Mode Admin) Indiquez le nom de la Cloud Function.
5. Renseignez :
   - Nom de la collection
   - Champ de critère
   - Valeur du champ
   - Type de la valeur
6. Cliquez sur **Démarrer la Purge**.
7. Confirmez l'opération (popup de confirmation).
8. Consultez le message de résultat en bas de page.

## 💡 Fonctionnement technique

- **Client SDK** : Utilise le SDK Firestore dans le navigateur pour requêter et supprimer les documents (batch).
- **Admin SDK** : Appelle la Cloud Function via le SDK Functions, qui effectue la suppression côté serveur (plus sécurisé).
- Les messages d'état (succès, erreur, info) sont affichés dans une boîte dédiée.
- L'UI est entièrement responsive et accessible.

## 🤝 Contribution

Contributions, issues et suggestions sont les bienvenues !

## 📄 Licence

Ce projet est sous licence [MIT](https://opensource.org/licenses/MIT).